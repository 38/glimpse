The Glimpse Plugin System


Introduction
========
The Glimpse Plugin System use a group of functions called API as the interface
to plugin. The plugin call functions API defined to manipulate types, data,
structure, etc. The API function converts the API call into function calls
defined inside Glimpse core code. 

The Glimpse Plugin System is flexible. User can develop different versions of 
API for different purpose. In addition, even Glimpse Updated ferquently, if the
specified version of API will be stable, it's possible to use older plugin
in a newer Glimpse without any modification. To archieve this, the plugin have
to indicates which version of API does it use after it has been loaded.

Finally,Both API developer and plugin developer can use the utils provided by the
Plugin System to work easily.



The Plugin Protocol
=========
The plugin and Glimpse will communicate each other using a function address
table defined by specified API after it have been initialized. The
initialization protocol is a bit more complex.

It can be devided into four stages.

1) Load the dymanic library. The Plugin System will find the library
named 'lib<your plugin name>.so' in pathes specified in the string array
glimpse_pluginloader_path, which end with a NULL pointer. After the plugin
has been found, plugin loader will call dl_open to load the dymanic library

2) Request plugin infomation. The Plugin System will lookfor the symbol named
'GetMetaData', then call the symbol to obtain information about the plugin,
including name, version and dependency. In this stage the plugin will also
allocate the memory used for API Function Table and fill plugin callbacks into
the table.

3) Resolve dependency. The framework will check the dependency, and load the
plugin it depens. If any error occur in this stage, the loaded will return a
GLIMPSE_EDEPENS indicates the dependency can not be satisfied.

4) Call the Initilaize Function of API. In this stage, the API will initialize
the plugin, fill entry addresses of API funtions in API Function Table, and
finally finish the process.

